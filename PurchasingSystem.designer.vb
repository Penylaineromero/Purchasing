'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="db_ict_31")>  _
Partial Public Class PurchasingSystemDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub Insertpur_tbl_user(instance As pur_tbl_user)
    End Sub
  Partial Private Sub Updatepur_tbl_user(instance As pur_tbl_user)
    End Sub
  Partial Private Sub Deletepur_tbl_user(instance As pur_tbl_user)
    End Sub
  Partial Private Sub Insertpur_tbl_inventory(instance As pur_tbl_inventory)
    End Sub
  Partial Private Sub Updatepur_tbl_inventory(instance As pur_tbl_inventory)
    End Sub
  Partial Private Sub Deletepur_tbl_inventory(instance As pur_tbl_inventory)
    End Sub
  Partial Private Sub Insertpur_tbl_user_inbox(instance As pur_tbl_user_inbox)
    End Sub
  Partial Private Sub Updatepur_tbl_user_inbox(instance As pur_tbl_user_inbox)
    End Sub
  Partial Private Sub Deletepur_tbl_user_inbox(instance As pur_tbl_user_inbox)
    End Sub
  Partial Private Sub Insertpur_tbl_admin_inbox(instance As pur_tbl_admin_inbox)
    End Sub
  Partial Private Sub Updatepur_tbl_admin_inbox(instance As pur_tbl_admin_inbox)
    End Sub
  Partial Private Sub Deletepur_tbl_admin_inbox(instance As pur_tbl_admin_inbox)
    End Sub
  Partial Private Sub Insertpur_tbl_feedback(instance As pur_tbl_feedback)
    End Sub
  Partial Private Sub Updatepur_tbl_feedback(instance As pur_tbl_feedback)
    End Sub
  Partial Private Sub Deletepur_tbl_feedback(instance As pur_tbl_feedback)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.Purchasing_System_ICT_III_1.My.MySettings.Default.db_ict_31ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property pur_tbl_users() As System.Data.Linq.Table(Of pur_tbl_user)
		Get
			Return Me.GetTable(Of pur_tbl_user)
		End Get
	End Property
	
	Public ReadOnly Property pur_tbl_inventories() As System.Data.Linq.Table(Of pur_tbl_inventory)
		Get
			Return Me.GetTable(Of pur_tbl_inventory)
		End Get
	End Property
	
	Public ReadOnly Property pur_tbl_user_inboxes() As System.Data.Linq.Table(Of pur_tbl_user_inbox)
		Get
			Return Me.GetTable(Of pur_tbl_user_inbox)
		End Get
	End Property
	
	Public ReadOnly Property pur_tbl_admin_inboxes() As System.Data.Linq.Table(Of pur_tbl_admin_inbox)
		Get
			Return Me.GetTable(Of pur_tbl_admin_inbox)
		End Get
	End Property
	
	Public ReadOnly Property pur_tbl_feedbacks() As System.Data.Linq.Table(Of pur_tbl_feedback)
		Get
			Return Me.GetTable(Of pur_tbl_feedback)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.pur_tbl_users")>  _
Partial Public Class pur_tbl_user
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _new_user_id As Integer
	
	Private _new_user_name As String
	
	Private _new_user_pass As String
	
	Private _new_confi_pass As String
	
	Private _new_user_dept As String
	
	Private _user_type As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onnew_user_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onnew_user_idChanged()
    End Sub
    Partial Private Sub Onnew_user_nameChanging(value As String)
    End Sub
    Partial Private Sub Onnew_user_nameChanged()
    End Sub
    Partial Private Sub Onnew_user_passChanging(value As String)
    End Sub
    Partial Private Sub Onnew_user_passChanged()
    End Sub
    Partial Private Sub Onnew_confi_passChanging(value As String)
    End Sub
    Partial Private Sub Onnew_confi_passChanged()
    End Sub
    Partial Private Sub Onnew_user_deptChanging(value As String)
    End Sub
    Partial Private Sub Onnew_user_deptChanged()
    End Sub
    Partial Private Sub Onuser_typeChanging(value As String)
    End Sub
    Partial Private Sub Onuser_typeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_new_user_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property new_user_id() As Integer
		Get
			Return Me._new_user_id
		End Get
		Set
			If ((Me._new_user_id = value)  _
						= false) Then
				Me.Onnew_user_idChanging(value)
				Me.SendPropertyChanging
				Me._new_user_id = value
				Me.SendPropertyChanged("new_user_id")
				Me.Onnew_user_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_new_user_name", DbType:="NVarChar(20)")>  _
	Public Property new_user_name() As String
		Get
			Return Me._new_user_name
		End Get
		Set
			If (String.Equals(Me._new_user_name, value) = false) Then
				Me.Onnew_user_nameChanging(value)
				Me.SendPropertyChanging
				Me._new_user_name = value
				Me.SendPropertyChanged("new_user_name")
				Me.Onnew_user_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_new_user_pass", DbType:="NVarChar(10)")>  _
	Public Property new_user_pass() As String
		Get
			Return Me._new_user_pass
		End Get
		Set
			If (String.Equals(Me._new_user_pass, value) = false) Then
				Me.Onnew_user_passChanging(value)
				Me.SendPropertyChanging
				Me._new_user_pass = value
				Me.SendPropertyChanged("new_user_pass")
				Me.Onnew_user_passChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_new_confi_pass", DbType:="NVarChar(10)")>  _
	Public Property new_confi_pass() As String
		Get
			Return Me._new_confi_pass
		End Get
		Set
			If (String.Equals(Me._new_confi_pass, value) = false) Then
				Me.Onnew_confi_passChanging(value)
				Me.SendPropertyChanging
				Me._new_confi_pass = value
				Me.SendPropertyChanged("new_confi_pass")
				Me.Onnew_confi_passChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_new_user_dept", DbType:="NVarChar(50)")>  _
	Public Property new_user_dept() As String
		Get
			Return Me._new_user_dept
		End Get
		Set
			If (String.Equals(Me._new_user_dept, value) = false) Then
				Me.Onnew_user_deptChanging(value)
				Me.SendPropertyChanging
				Me._new_user_dept = value
				Me.SendPropertyChanged("new_user_dept")
				Me.Onnew_user_deptChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_type", DbType:="NVarChar(50)")>  _
	Public Property user_type() As String
		Get
			Return Me._user_type
		End Get
		Set
			If (String.Equals(Me._user_type, value) = false) Then
				Me.Onuser_typeChanging(value)
				Me.SendPropertyChanging
				Me._user_type = value
				Me.SendPropertyChanged("user_type")
				Me.Onuser_typeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.pur_tbl_inventory")>  _
Partial Public Class pur_tbl_inventory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _order_id As Long
	
	Private _item_name As String
	
	Private _item_date As System.Nullable(Of Date)
	
	Private _item_qty As String
	
	Private _item_price As String
	
	Private _item_total_price As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onorder_idChanging(value As Long)
    End Sub
    Partial Private Sub Onorder_idChanged()
    End Sub
    Partial Private Sub Onitem_nameChanging(value As String)
    End Sub
    Partial Private Sub Onitem_nameChanged()
    End Sub
    Partial Private Sub Onitem_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onitem_dateChanged()
    End Sub
    Partial Private Sub Onitem_qtyChanging(value As String)
    End Sub
    Partial Private Sub Onitem_qtyChanged()
    End Sub
    Partial Private Sub Onitem_priceChanging(value As String)
    End Sub
    Partial Private Sub Onitem_priceChanged()
    End Sub
    Partial Private Sub Onitem_total_priceChanging(value As String)
    End Sub
    Partial Private Sub Onitem_total_priceChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_order_id", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property order_id() As Long
		Get
			Return Me._order_id
		End Get
		Set
			If ((Me._order_id = value)  _
						= false) Then
				Me.Onorder_idChanging(value)
				Me.SendPropertyChanging
				Me._order_id = value
				Me.SendPropertyChanged("order_id")
				Me.Onorder_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_item_name", DbType:="NVarChar(50)")>  _
	Public Property item_name() As String
		Get
			Return Me._item_name
		End Get
		Set
			If (String.Equals(Me._item_name, value) = false) Then
				Me.Onitem_nameChanging(value)
				Me.SendPropertyChanging
				Me._item_name = value
				Me.SendPropertyChanged("item_name")
				Me.Onitem_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_item_date", DbType:="Date")>  _
	Public Property item_date() As System.Nullable(Of Date)
		Get
			Return Me._item_date
		End Get
		Set
			If (Me._item_date.Equals(value) = false) Then
				Me.Onitem_dateChanging(value)
				Me.SendPropertyChanging
				Me._item_date = value
				Me.SendPropertyChanged("item_date")
				Me.Onitem_dateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_item_qty", DbType:="NVarChar(50)")>  _
	Public Property item_qty() As String
		Get
			Return Me._item_qty
		End Get
		Set
			If (String.Equals(Me._item_qty, value) = false) Then
				Me.Onitem_qtyChanging(value)
				Me.SendPropertyChanging
				Me._item_qty = value
				Me.SendPropertyChanged("item_qty")
				Me.Onitem_qtyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_item_price", DbType:="NVarChar(50)")>  _
	Public Property item_price() As String
		Get
			Return Me._item_price
		End Get
		Set
			If (String.Equals(Me._item_price, value) = false) Then
				Me.Onitem_priceChanging(value)
				Me.SendPropertyChanging
				Me._item_price = value
				Me.SendPropertyChanged("item_price")
				Me.Onitem_priceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_item_total_price", DbType:="NVarChar(50)")>  _
	Public Property item_total_price() As String
		Get
			Return Me._item_total_price
		End Get
		Set
			If (String.Equals(Me._item_total_price, value) = false) Then
				Me.Onitem_total_priceChanging(value)
				Me.SendPropertyChanging
				Me._item_total_price = value
				Me.SendPropertyChanged("item_total_price")
				Me.Onitem_total_priceChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.pur_tbl_user_inbox")>  _
Partial Public Class pur_tbl_user_inbox
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _admin_id As Long
	
	Private _admin_msg As String
	
	Private _admin_msg_status As String
	
	Private _admin_date As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onadmin_idChanging(value As Long)
    End Sub
    Partial Private Sub Onadmin_idChanged()
    End Sub
    Partial Private Sub Onadmin_msgChanging(value As String)
    End Sub
    Partial Private Sub Onadmin_msgChanged()
    End Sub
    Partial Private Sub Onadmin_msg_statusChanging(value As String)
    End Sub
    Partial Private Sub Onadmin_msg_statusChanged()
    End Sub
    Partial Private Sub Onadmin_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onadmin_dateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_admin_id", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property admin_id() As Long
		Get
			Return Me._admin_id
		End Get
		Set
			If ((Me._admin_id = value)  _
						= false) Then
				Me.Onadmin_idChanging(value)
				Me.SendPropertyChanging
				Me._admin_id = value
				Me.SendPropertyChanged("admin_id")
				Me.Onadmin_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_admin_msg", DbType:="NVarChar(500)")>  _
	Public Property admin_msg() As String
		Get
			Return Me._admin_msg
		End Get
		Set
			If (String.Equals(Me._admin_msg, value) = false) Then
				Me.Onadmin_msgChanging(value)
				Me.SendPropertyChanging
				Me._admin_msg = value
				Me.SendPropertyChanged("admin_msg")
				Me.Onadmin_msgChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_admin_msg_status", DbType:="NVarChar(20)")>  _
	Public Property admin_msg_status() As String
		Get
			Return Me._admin_msg_status
		End Get
		Set
			If (String.Equals(Me._admin_msg_status, value) = false) Then
				Me.Onadmin_msg_statusChanging(value)
				Me.SendPropertyChanging
				Me._admin_msg_status = value
				Me.SendPropertyChanged("admin_msg_status")
				Me.Onadmin_msg_statusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_admin_date", DbType:="Date")>  _
	Public Property admin_date() As System.Nullable(Of Date)
		Get
			Return Me._admin_date
		End Get
		Set
			If (Me._admin_date.Equals(value) = false) Then
				Me.Onadmin_dateChanging(value)
				Me.SendPropertyChanging
				Me._admin_date = value
				Me.SendPropertyChanged("admin_date")
				Me.Onadmin_dateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.pur_tbl_admin_inbox")>  _
Partial Public Class pur_tbl_admin_inbox
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _user_id As Long
	
	Private _user_name As String
	
	Private _user_dept As String
	
	Private _user_item_request As String
	
	Private _user_item_qty As System.Nullable(Of Long)
	
	Private _user_req_status As String
	
	Private _user_date As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onuser_idChanging(value As Long)
    End Sub
    Partial Private Sub Onuser_idChanged()
    End Sub
    Partial Private Sub Onuser_nameChanging(value As String)
    End Sub
    Partial Private Sub Onuser_nameChanged()
    End Sub
    Partial Private Sub Onuser_deptChanging(value As String)
    End Sub
    Partial Private Sub Onuser_deptChanged()
    End Sub
    Partial Private Sub Onuser_item_requestChanging(value As String)
    End Sub
    Partial Private Sub Onuser_item_requestChanged()
    End Sub
    Partial Private Sub Onuser_item_qtyChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub Onuser_item_qtyChanged()
    End Sub
    Partial Private Sub Onuser_req_statusChanging(value As String)
    End Sub
    Partial Private Sub Onuser_req_statusChanged()
    End Sub
    Partial Private Sub Onuser_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onuser_dateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_id", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property user_id() As Long
		Get
			Return Me._user_id
		End Get
		Set
			If ((Me._user_id = value)  _
						= false) Then
				Me.Onuser_idChanging(value)
				Me.SendPropertyChanging
				Me._user_id = value
				Me.SendPropertyChanged("user_id")
				Me.Onuser_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_name", DbType:="NVarChar(15)")>  _
	Public Property user_name() As String
		Get
			Return Me._user_name
		End Get
		Set
			If (String.Equals(Me._user_name, value) = false) Then
				Me.Onuser_nameChanging(value)
				Me.SendPropertyChanging
				Me._user_name = value
				Me.SendPropertyChanged("user_name")
				Me.Onuser_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_dept", DbType:="NVarChar(50)")>  _
	Public Property user_dept() As String
		Get
			Return Me._user_dept
		End Get
		Set
			If (String.Equals(Me._user_dept, value) = false) Then
				Me.Onuser_deptChanging(value)
				Me.SendPropertyChanging
				Me._user_dept = value
				Me.SendPropertyChanged("user_dept")
				Me.Onuser_deptChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_item_request", DbType:="NVarChar(500)")>  _
	Public Property user_item_request() As String
		Get
			Return Me._user_item_request
		End Get
		Set
			If (String.Equals(Me._user_item_request, value) = false) Then
				Me.Onuser_item_requestChanging(value)
				Me.SendPropertyChanging
				Me._user_item_request = value
				Me.SendPropertyChanged("user_item_request")
				Me.Onuser_item_requestChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_item_qty", DbType:="BigInt")>  _
	Public Property user_item_qty() As System.Nullable(Of Long)
		Get
			Return Me._user_item_qty
		End Get
		Set
			If (Me._user_item_qty.Equals(value) = false) Then
				Me.Onuser_item_qtyChanging(value)
				Me.SendPropertyChanging
				Me._user_item_qty = value
				Me.SendPropertyChanged("user_item_qty")
				Me.Onuser_item_qtyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_req_status", DbType:="NVarChar(20)")>  _
	Public Property user_req_status() As String
		Get
			Return Me._user_req_status
		End Get
		Set
			If (String.Equals(Me._user_req_status, value) = false) Then
				Me.Onuser_req_statusChanging(value)
				Me.SendPropertyChanging
				Me._user_req_status = value
				Me.SendPropertyChanged("user_req_status")
				Me.Onuser_req_statusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_date", DbType:="Date")>  _
	Public Property user_date() As System.Nullable(Of Date)
		Get
			Return Me._user_date
		End Get
		Set
			If (Me._user_date.Equals(value) = false) Then
				Me.Onuser_dateChanging(value)
				Me.SendPropertyChanging
				Me._user_date = value
				Me.SendPropertyChanged("user_date")
				Me.Onuser_dateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.pur_tbl_feedback")>  _
Partial Public Class pur_tbl_feedback
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _user_id As Integer
	
	Private _user_name As String
	
	Private _user_dept As String
	
	Private _feed_date As System.Nullable(Of Date)
	
	Private _user_feedback As String
	
	Private _feed_status As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onuser_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onuser_idChanged()
    End Sub
    Partial Private Sub Onuser_nameChanging(value As String)
    End Sub
    Partial Private Sub Onuser_nameChanged()
    End Sub
    Partial Private Sub Onuser_deptChanging(value As String)
    End Sub
    Partial Private Sub Onuser_deptChanged()
    End Sub
    Partial Private Sub Onfeed_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onfeed_dateChanged()
    End Sub
    Partial Private Sub Onuser_feedbackChanging(value As String)
    End Sub
    Partial Private Sub Onuser_feedbackChanged()
    End Sub
    Partial Private Sub Onfeed_statusChanging(value As String)
    End Sub
    Partial Private Sub Onfeed_statusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property user_id() As Integer
		Get
			Return Me._user_id
		End Get
		Set
			If ((Me._user_id = value)  _
						= false) Then
				Me.Onuser_idChanging(value)
				Me.SendPropertyChanging
				Me._user_id = value
				Me.SendPropertyChanged("user_id")
				Me.Onuser_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_name", DbType:="NVarChar(50)")>  _
	Public Property user_name() As String
		Get
			Return Me._user_name
		End Get
		Set
			If (String.Equals(Me._user_name, value) = false) Then
				Me.Onuser_nameChanging(value)
				Me.SendPropertyChanging
				Me._user_name = value
				Me.SendPropertyChanged("user_name")
				Me.Onuser_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_dept", DbType:="NVarChar(50)")>  _
	Public Property user_dept() As String
		Get
			Return Me._user_dept
		End Get
		Set
			If (String.Equals(Me._user_dept, value) = false) Then
				Me.Onuser_deptChanging(value)
				Me.SendPropertyChanging
				Me._user_dept = value
				Me.SendPropertyChanged("user_dept")
				Me.Onuser_deptChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_feed_date", DbType:="Date")>  _
	Public Property feed_date() As System.Nullable(Of Date)
		Get
			Return Me._feed_date
		End Get
		Set
			If (Me._feed_date.Equals(value) = false) Then
				Me.Onfeed_dateChanging(value)
				Me.SendPropertyChanging
				Me._feed_date = value
				Me.SendPropertyChanged("feed_date")
				Me.Onfeed_dateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_feedback", DbType:="NVarChar(500)")>  _
	Public Property user_feedback() As String
		Get
			Return Me._user_feedback
		End Get
		Set
			If (String.Equals(Me._user_feedback, value) = false) Then
				Me.Onuser_feedbackChanging(value)
				Me.SendPropertyChanging
				Me._user_feedback = value
				Me.SendPropertyChanged("user_feedback")
				Me.Onuser_feedbackChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_feed_status", DbType:="NVarChar(50)")>  _
	Public Property feed_status() As String
		Get
			Return Me._feed_status
		End Get
		Set
			If (String.Equals(Me._feed_status, value) = false) Then
				Me.Onfeed_statusChanging(value)
				Me.SendPropertyChanging
				Me._feed_status = value
				Me.SendPropertyChanged("feed_status")
				Me.Onfeed_statusChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
